// ---------------------------------------------------------------------------
// Primitivas geometricas basicas
// J. Ribelles, A. Lopez
// Mayo 2018
// ---------------------------------------------------------------------------

var examplePlane = {  // 4 vértices, 2 triángulos

    "vertices" : [-0.5, 0.0, 0.5,
                   0.5, 0.0, 0.5,
                   0.5, 0.0,-0.5,
                  -0.5, 0.0,-0.5],
    
    "indices" : [0, 1, 2, 0, 2, 3]

};
  
var exampleCube = {  // 8 vértices, 12 triángulos
    
    "vertices" : [-0.5,-0.5,  0.5,
                   0.5,-0.5,  0.5,
                   0.5, 0.5,  0.5,
                  -0.5, 0.5,  0.5,
                  -0.5,-0.5, -0.5,
                   0.5,-0.5, -0.5,
                   0.5, 0.5, -0.5,
                  -0.5, 0.5, -0.5],

    "indices" : [ 0, 1, 2, 0, 2, 3, 
                  1, 5, 6, 1, 6, 2,
                  3, 2, 6, 3, 6, 7,
                  5, 4, 7, 5, 7, 6,
                  4, 0, 3, 4, 3, 7,
                  4, 5, 1, 4, 1, 0]

};

var exampleCover = {  // 13 vértices, 12 triángulos

    "vertices" : [ 1,  0, 0,  0.866,  0.5,   0,  0.5,    0.866, 0, 
                   0,  1, 0, -0.5,    0.866, 0, -0.86,   0.5,   0, 
                  -1,  0, 0, -0.866, -0.5,   0, -0.5,   -0.866, 0, 
                   0, -1, 0,  0.5,   -0.866, 0,  0.866, -0.5,   0, 
                   0,  0, 0],
                     
    "indices" : [ 0, 1, 12, 1, 2, 12, 2, 3, 12, 3,  4, 12,  4,  5, 12,  5, 6, 12,  
                  6, 7, 12, 7, 8, 12, 8, 9, 12, 9, 10, 12, 10, 11, 12, 11, 0, 12]

};

var exampleCone = {  // 13 vértices, 12 triángulos

    "vertices" : [ 1,  0, 0,  0.866,  0.5,   0,  0.5,    0.866, 0, 
                   0,  1, 0, -0.5,    0.866, 0, -0.86,   0.5,   0, 
                  -1,  0, 0, -0.866, -0.5,   0, -0.5,   -0.866, 0, 
                   0, -1, 0,  0.5,   -0.866, 0,  0.866, -0.5,   0, 
                   0,  0, 1],
                     
    "indices" : [ 0, 1, 12, 1, 2, 12, 2, 3, 12, 3,  4, 12,  4,  5, 12,  5, 6, 12,  
                  6, 7, 12, 7, 8, 12, 8, 9, 12, 9, 10, 12, 10, 11, 12, 11, 0, 12]

};
                    
var exampleCylinder = {  // 24 vértices, 24 triángulos

    "vertices" : [ 1,  0, 0,  0.866,  0.5,   0,  0.5,    0.866, 0, 
                   0,  1, 0, -0.5,    0.866, 0, -0.86,   0.5,   0, 
                  -1,  0, 0, -0.866, -0.5,   0, -0.5,   -0.866, 0, 
                   0, -1, 0,  0.5,   -0.866, 0,  0.866, -0.5,   0,
                   1,  0, 1,  0.866,  0.5,   1,  0.5,    0.866, 1, 
                   0,  1, 1, -0.5,    0.866, 1, -0.86,   0.5,   1, 
                  -1,  0, 1, -0.866, -0.5,   1, -0.5,   -0.866, 1, 
                   0, -1, 1,  0.5,   -0.866, 1,  0.866, -0.5,   1],
    
    "indices" : [ 0,  1, 12, 1,  2, 13, 2,  3, 14,  3,  4, 15,  4,  5, 16,  5,  6, 17,  
                  6,  7, 18, 7,  8, 19, 8,  9, 20,  9, 10, 21, 10, 11, 22, 11,  0, 23,
                  1, 13, 12, 2, 14, 13, 3, 15, 14,  4, 16, 15,  5, 17, 16,  6, 18, 17,
                  7, 19, 18, 8, 20, 19, 9, 21, 20, 10, 22, 21, 11, 23, 22,  0, 12, 23]

};
           
var exampleSphere = {  // 42 vértices, 80 triángulos

    "vertices" : [ 0.000000, 0.850651, 0.525731,
                  -0.309017, 0.500000, 0.809017,
                   0.309017, 0.500000, 0.809017,
                  -0.525731, 0.000000, 0.850651,
                   0.000000, 0.000000, 1.000000,
                   0.525731, 0.000000, 0.850651,
                  -0.850651, 0.525731, 0.000000,
                  -0.809017, 0.309017, 0.500000,
                  -0.500000, 0.809017, 0.309017,
                   0.000000, 0.850651,-0.525731,
                  -0.500000, 0.809017,-0.309017,
                   0.000000, 1.000000, 0.000000,
                   0.500000, 0.809017,-0.309017,
                   0.500000, 0.809017, 0.309017,
                   0.850651, 0.525731, 0.000000,
                   0.809017, 0.309017, 0.500000,
                   0.850651,-0.525731, 0.000000,
                   1.000000, 0.000000, 0.000000,
                   0.809017,-0.309017, 0.500000,
                   0.525731, 0.000000,-0.850651,
                   0.809017, 0.309017,-0.500000,
                   0.809017,-0.309017,-0.500000,
                   0.309017, 0.500000,-0.809017,
                  -0.525731, 0.000000,-0.850651,
                  -0.309017, 0.500000,-0.809017,
                   0.000000, 0.000000,-1.000000,
                   0.000000,-0.850651,-0.525731,
                  -0.309017,-0.500000,-0.809017,
                   0.309017,-0.500000,-0.809017,
                   0.500000,-0.809017,-0.309017,
                   0.000000,-0.850651, 0.525731,
                   0.000000,-1.000000, 0.000000,
                   0.500000,-0.809017, 0.309017,
                  -0.850651,-0.525731, 0.000000,
                  -0.500000,-0.809017,-0.309017,
                  -0.500000,-0.809017, 0.309017,
                  -0.809017,-0.309017, 0.500000,
                  -0.309017,-0.500000, 0.809017,
                   0.309017,-0.500000, 0.809017,
                  -1.000000, 0.000000, 0.000000,
                  -0.809017,-0.309017,-0.500000,
                  -0.809017, 0.309017,-0.500000],

    "indices" : [ 1, 2, 0, 4, 1, 3, 2, 4, 5, 4, 2, 1, 7, 8, 6, 1, 7, 3, 8, 1, 0, 1, 8, 7,10,11, 9, 8,10, 6,
                 11, 8, 0, 8,11,10,11,12, 9,13,11, 0,12,13,14,13,12,11,13,15,14, 2,13, 0,15, 2, 5, 2,15,13,
                 17,18,16,15,17,14,18,15, 5,15,18,17,20,21,19,17,20,14,21,17,16,17,21,20,22,20,19,12,22, 9,
                 20,12,14,12,20,22,24,25,23,22,24, 9,25,22,19,22,25,24,27,28,26,25,27,23,28,25,19,25,28,27,
                 29,21,16,28,29,26,21,28,19,28,21,29,31,32,30,29,31,26,32,29,16,29,32,31,34,35,33,31,34,26,
                 35,31,30,31,35,34,36,37, 3,35,36,33,37,35,30,35,37,36, 4,38, 5,37, 4, 3,38,37,30,37,38, 4,
                 38,18, 5,32,38,30,18,32,16,32,18,38, 7,36, 3,39, 7, 6,36,39,33,39,36, 7,39,40,33,41,39, 6,
                 40,41,23,41,40,39,41,24,23,10,41, 6,24,10, 9,10,24,41,27,40,23,34,27,26,40,34,33,34,40,27]

};

function makeTorus (innerRadius, outerRadius, nSides, nRings) {
        
  var torus = {
      "vertices" : [],
      "indices"  : []
  };
  
  if (nSides < 3 ) nSides = 3;
  if (nRings < 3 ) nRings = 3;
        
  var dpsi =  2.0 * Math.PI / nRings ;
  var dphi = -2.0 * Math.PI / nSides ;
  var psi  =  0.0;
  
  for (var j = 0; j < nRings; j++) {
    
    var cpsi = Math.cos ( psi ) ;
    var spsi = Math.sin ( psi ) ;
    var phi  = 0.0;

    for (var i = 0; i < nSides; i++) {
      
      var offset = 3 * ( j * (nSides+1) + i ) ;
      var cphi   = Math.cos ( phi ) ;
      var sphi   = Math.sin ( phi ) ;
      
      torus.vertices[offset + 0] = cpsi * ( outerRadius + cphi * innerRadius ) ;
      torus.vertices[offset + 1] = spsi * ( outerRadius + cphi * innerRadius ) ;
      torus.vertices[offset + 2] =                        sphi * innerRadius   ;
      
      phi += dphi;
      
    }

    var offset = torus.vertices.length;
    for (var i = 0; i < 3; i++)
      torus.vertices[offset + i] = torus.vertices[offset-nSides*3+i];

    psi += dpsi;
    
  }

  var offset = torus.vertices.length;
  for (var i = 0; i < 3*(nSides+1); i++)
    torus.vertices[offset+i] = torus.vertices[i];

  for (var j = 0; j < nRings; j++){
    
    var desp = j * (nSides + 1);

    for (var i = 0; i < nSides; i++){
      
      torus.indices.push(desp + i,     desp + i + 1,              desp + i + (nSides+1)); 
      torus.indices.push(desp + i + 1, desp + i + (nSides+1) + 1, desp + i + (nSides+1)); 
      
    }
    
  }

  return torus; 
  
}

